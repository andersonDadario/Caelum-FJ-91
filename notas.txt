- Requisitos não funcionais
	- Assumir
	- Desafiar
- Definir Arquitetura
	- Extender
	- Criar
- Escolher Tecnologias
	- Usar a atual
	- Avaliar
- Avaliar Arquiteturas
	- Funciona!
	- Provar/Justificar
- Colaboração
	- Documentar
	- Colaborar
- Big Picture
	- Conhecer
	- Vender
- Liderança
	- Receber
	- Assumir Responsabilidade
- Coaching/Mentoring
	- Receber
	- Ensinar
- Qualidade
	- Revisar
	- Esforçar
- Design, Desenvolvimento e Testes
	- Veja
	- Envolva




=============================================================
- Especificação JVM
- Auditoria de especificações pela Oracle

- Java Community Process (JCP.org)


Ruby	       \
Php		\
Python		| --> bytecode | invocation dynamique
Scala		/
Etc	       /


Just In Time (JIT)
	~> depende do tamanho da classe

Hotspot (quente)
	-client
		1500 evocações
		-XX:+UseSerialGC
	-server
		10000 evocações
		-XX:+UseParallelGC

	
	-XX:+UseAdaptativeSizePolicy
		~ A logo prazo resolve
		~ senão os seguintes parâmetros devem ser utilizados:
			-XX:NewSize=80M
			-XX:NewRatio=3

	-XX:+UseConcurrentMarkSweepGC
		~ Demora mais tempo
		~ Permite que a aplicação responda mais rápido
		~ Abre nova thread
		~ Só para quando for necessário mover os ponteiros

	-XX:+UseParallelOldGC
		~ Não roda serial no Old

	-XX:+UseG1GC >> divide a memória existente
	-XX:+UnlocExperimentalOptions
		} casos muito específicos
		} divide HEAP em diversos blocos
			} todo bloco novo é "YOUNG"
			} GC roda em blocos aleatórios
			} Muda estado do bloco
			} Agrupa blocos por estado

	$ java -XX:CompileThreshold=300


java no modo client (default p/ 32 bits)
	> inicia rápido
	> inicia com pouca performance
	> recomendado para aplicações pequenas
	> ganho a curto prazo

java no modo server (default p/64 bits)
	> inicia devagar
	> iniciar com alta performance
	> recomendado para aplicações grandes
	> ganho a longo prazo

java -Xint
	> remove JIT

java -XX:+PrintCompilation
	> mostra detalhes da compilação/otimização

=============================================================

Memória
Teoria das Gerações

>> 92-98% dos objetos morrem cedo

	young (1/3)
	/
Heap ---
	\
	old (2/3)

	[ -XX:NewRatio=3 ]

> copia o que sobrevive p/ old
> modificar os ponteiros
> limpa bloco inteiro "young"

>> é possível configurar a % para Young e a % para Old (-XX:NewSize=80m)
>> quando encher o old, o Garbage Collector aparece (Full GC - 3x + lento)
>> system.gc() sugere que é uma boa hora de aparecer o GC
	[ -XX:+DisableExplicityGC ]

java -verbose:gc EstressaGC
GC|FullGC	Antes -> Depois (Total) Tempo


java -Xms500M >> valor inicial
java -Xmx100G >> valor maximo

[ -X  = pertence a todas as JVMs ]
[ -XX = pertence apenas à JVM da Oracle ]

=============================================================
Profiling

JProfiler > 30 dias grátis
VisualVM (jvisualvm)
	> Tools > Plugins > Visual GC


[ YOUNG ]
	Lv1: Eden
	Lv2: S0
	Lv3: S1
	Lv4 --> OLD


>> OLD cheio = OutOfMemoryError

=============================================================

Perm
	Armazenamento permanente, por ex: classes (.class)

Classloader
				} Bootstrap CL ----> rt.jar (runtime)
				}	^
				}	|
				} Extension CL ----> lib/ext (opt java)
				}	^
				}	|
	java -cp		} Application CL --> classpath
	classes utilizadas	}	^ 
				}	|
				} Standard CL -----> Servlet/JSP/EL
				}	|
				} 	|
				} ---------------
				} |		|
				} v		v
				  [WEB APP]  	[WEB APP (Hot Deploy)]


	-D ==> propriedades p/ VM
	_Djava.endorsed.dirs=/libesp
		> maior prioridade

	[ JAR Hell ]
	[ Carrega conforme buildpath se 2 JARs tiverem a mesma classe ]

	[ Compilação: busca bibliotecas de baixo para cima ]
	[ Execução: busca bibliotecas de cima para baixo   ]

	[ Toda classe possui referência do seu classloader ]


	classloader-web
		> remover getHeaders()
		> atualizar Tomcat de 6 p/ 7
		> alterar ordem dos classloaders

=============================================================
Memory Leak
~  por conta de hot deploy ~

	-XX:PermSize=128m
	-XX:MaxPermSize=512m

	> PERM fica cheio porque recursos não foram liberados no Tomcat 6
	> Caso MySQL

	[Bootstrap] --> [Driver Manager]
	 ^			|
	 |			|
	[Extension CL]		|
	 ^			|
	 |			|
	[Standard CL]		|
	 ^			|
	 |			v
	[Web App] -------> [Driver MySQL]

	> cada novo hotdeploy mantém a referência ao driver MySQL
	> e não apaga o antigo classloader
=============================================================
Encapsulamento

	[ Tell, Don't Ask ]


	getNomeCompleto() X toString()

	Exception Checked X Unchecked
		Checked		-> throws everywhere
				-> impacta várias classes
				-> vaza informações técnica
		Unchecked	-> só trata quem precisa


	Camada
	  - Layer {lógica}
	  - Tier {física}


	-------------------------
	| Objeto		|
	|   - atributos		|
	|   - comportamentos	|
	-------------------------
=============================================================
Refactor


	GoF - 1o capítulo: programe orientado à interfaces
	DAO
	  * Por que retornar lista se o objetivo é iterar? *
	  * Retorne e Recaba o tipo mais genérico *

	  - Iterable
		- Collection
			- List
				- etc

	  Collections.unmodifiedList(contas)
	  - devolve lista com métodos modificados





	Eclipse Classe --> Refactor --> Extract Interface
	aplica (INTERFACE xpto)
		xpto.METODO



	Cuidado com herança
	>> herde de classes estátveis
	>> heder de classes projetadas para isso

	[ Herança X Composição ]


	Flyweight >> substring(i,f)
	Fluent Interface >> DSL (Livro Martin Fowler)
	DDD >> Orientar à Domínio
=============================================================
CDI

// faltei
=============================================================
Requisitos não funcionais

Performance
	-> o usuário quem dita o que é aceitável ou não
	-> webpagetest.org
	-> js antes do </body>
	-> google closure
	-> yahoo minifier
	-> uglifier
	-> js beautifier
	-> grunt.js
	-> gulp.js

	-> Collections (Array List X HashSet)
	-> for(...) { query(); }

	-> Round Hobin
		>> processamento
		>> conexões
		>> estado

	-> Priorização
		IP1 60%
		IP2 30%
		IP3 10%

	-> Load Balancer
		JSESSIONID < 10 = Node1
		JSESSIONID >= 10 && JSESSIONID <= 20 = Node2
		JSESSIONID > 20 = Node3

	-> Terracotta mantém 1 instância de singleton entre JVMs



	Threads
		> Tomcat = default 32 thredas (1 p/ request)
		>> Problema de bloquear cliente por I/O
		>> Criação de Pool de Threads
		>>>> I/O Assíncrono
		>>>> Cai performance
		>>>> [Grizly] [Glassfish]
		>>>> [Play]
		>>>> java.util.concurrent

	Tests
		>> ab -n 1000 -c 100 http://localhost/
		>> siege
		>> MetricMiner
		>> CodeSherif


Segurança
	getParameter => hashSet => mesmo hashCode (Parameter Pollution)
	Tomcat Valve
	Converter (Text -> String)
	<% c %> ao invés de expression language
	mass assignment



1) Performance
2) Escalabilidade e Disponibilidade
	> Atingir o requisito de Performance para múltiplos usuários
3) Confiabilidade
	> Ex: mobile app
	> Atualização (patch)
	> Mudança de configuração no S.O.
4) Gerenciabilidade
5) Segurança
